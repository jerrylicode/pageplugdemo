{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getReturns",
    "fullyQualifiedName": "utils.getReturns",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Returns",
    "collectionId": "Returns_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const returns = await getReturns.run();\n  const fromDate = dat_from.formattedDate || null;\n  const toDate = dat_to.formattedDate || null;\n  let filteredReturns = returns;\n  if (fromDate && toDate) {\n    filteredReturns = returns.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n  }\n  if (sel_status.selectedOptionValue) {\n    filteredReturns = returns.filter(k => k.status === sel_status.selectedOptionValue);\n  }\n  return filteredReturns.map(r => {\n    return {\n      Id: r.id,\n      ID: utils.idConverter(r.id),\n      OrderID: r.order_id,\n      Product: r.name,\n      Description: r.category,\n      ShippedQty: r.quantity,\n      Quantity: r.returned_quantity,\n      Amount: r.price.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      ReturnOrderID: 1,\n      WarehouseName: r.label,\n      ReturnedDate: new Date(r.returned_date).toDateString(),\n      Reason: r.reason,\n      Status: r.status,\n      Warehouse: r.warehouse,\n      WarehouseId: r.warehouse_id\n    };\n  }).sort((a, b) => a.id - b.id);\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const returns = await getReturns.run();\n  const fromDate = dat_from.formattedDate || null;\n  const toDate = dat_to.formattedDate || null;\n  let filteredReturns = returns;\n  if (fromDate && toDate) {\n    filteredReturns = returns.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n  }\n  if (sel_status.selectedOptionValue) {\n    filteredReturns = returns.filter(k => k.status === sel_status.selectedOptionValue);\n  }\n  return filteredReturns.map(r => {\n    return {\n      Id: r.id,\n      ID: utils.idConverter(r.id),\n      OrderID: r.order_id,\n      Product: r.name,\n      Description: r.category,\n      ShippedQty: r.quantity,\n      Quantity: r.returned_quantity,\n      Amount: r.price.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      ReturnOrderID: 1,\n      WarehouseName: r.label,\n      ReturnedDate: new Date(r.returned_date).toDateString(),\n      Reason: r.reason,\n      Status: r.status,\n      Warehouse: r.warehouse,\n      WarehouseId: r.warehouse_id\n    };\n  }).sort((a, b) => a.id - b.id);\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Returns_utils.getReturns",
  "deleted": false,
  "gitSyncId": "64f58f816fbfd93d5cd5b5cf_2023-09-04T08:05:28.034988Z"
}