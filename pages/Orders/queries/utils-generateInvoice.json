{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "generateInvoice",
    "fullyQualifiedName": "utils.generateInvoice",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Orders",
    "collectionId": "Orders_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const imgUrl = 'https://s3.us-east-2.amazonaws.com/template.appsmith.com/order-fulfillment-tracker-demo-invoice.jpg';\n  let doc = new jspdf.jsPDF();\n  let pdfData = await getPdfImage.run({\n    url: imgUrl\n  });\n  const docSize = _.pick(doc.internal.pageSize, ['width', 'height']);\n  const imageSize = _.pick(doc.getImageProperties(pdfData), ['width', 'height']);\n  const wRatio = docSize.width / imageSize.width;\n  const newImgSize = {\n    w: parseInt(imageSize.width * wRatio),\n    h: parseInt(imageSize.height * wRatio)\n  };\n  await doc.addImage(pdfData, 'JPEG', 0, 0, newImgSize.w, newImgSize.h);\n  const font = 'helvetica';\n  const fontStyle = 'bold';\n  const fontSize = 20;\n  const textColor = 'black';\n  doc.setFont(font, fontStyle);\n  doc.setFontSize(fontSize);\n  doc.setTextColor(textColor);\n  const orderProductsName = tbl_orderProducts.tableData.map((p, index) => {\n    return {\n      data: p.Name,\n      x: 20,\n      y: 130 + index * 10,\n      fontSize: 14,\n      fontStyle: 'normal',\n      font: 'helvetica'\n    };\n  });\n  const orderProductsQty = tbl_orderProducts.tableData.map((p, index) => {\n    return {\n      data: p.Quantity,\n      x: 110,\n      y: 130 + index * 10,\n      fontSize: 14,\n      fontStyle: 'normal',\n      font: 'helvetica'\n    };\n  });\n  const orderProductsCost = tbl_orderProducts.tableData.map((p, index) => {\n    return {\n      data: p.Subtotal.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      x: 175,\n      y: 130 + index * 10,\n      fontSize: 14,\n      fontStyle: 'normal',\n      font: 'helvetica'\n    };\n  });\n  const labelData = [...orderProductsName, ...orderProductsQty, ...orderProductsCost, {\n    data: tbl_orderProducts.tableData.reduce((a, b) => a + b.Subtotal, 0).toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    x: 170,\n    y: 205,\n    fontSize: 18,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: 'Order ID #' + appsmith.store.order.ID,\n    x: 130,\n    y: 25,\n    fontSize: 18,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_shipFrom.text || `1234 Industrial Blvd\nUnit 5678\nCityville, State 98765\n\n\n\nPhone: 988-989-9877`,\n    x: 150,\n    y: 60,\n    fontSize: 14,\n    fontStyle: 'normal',\n    font: 'helvetica'\n  }, {\n    data: appsmith.store.order.ShippingAddress,\n    x: 10,\n    y: 60,\n    fontSize: 14,\n    fontStyle: 'normal',\n    font: 'helvetica'\n  }, {\n    data: new Date(appsmith.store.order.Order_date).toDateString(),\n    x: 10,\n    y: 80,\n    fontSize: 14,\n    fontStyle: 'normal',\n    font: 'helvetica'\n  }];\n  labelData.forEach(field => {\n    let fieldValue = field.data;\n    fieldValue = typeof fieldValue == 'number' ? JSON.stringify(fieldValue) : fieldValue;\n    doc.setFont(field.font, field.fontStyle);\n    doc.setFontSize(field.fontSize);\n    doc.text(fieldValue, field.x, field.y);\n  });\n  doc.save('mydocument.pdf');\n  const outputPDF = doc.output('dataurlstring');\n  storeValue('labelPDF', outputPDF);\n  return outputPDF;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const imgUrl = 'https://s3.us-east-2.amazonaws.com/template.appsmith.com/order-fulfillment-tracker-demo-invoice.jpg';\n  let doc = new jspdf.jsPDF();\n  let pdfData = await getPdfImage.run({\n    url: imgUrl\n  });\n  const docSize = _.pick(doc.internal.pageSize, ['width', 'height']);\n  const imageSize = _.pick(doc.getImageProperties(pdfData), ['width', 'height']);\n  const wRatio = docSize.width / imageSize.width;\n  const newImgSize = {\n    w: parseInt(imageSize.width * wRatio),\n    h: parseInt(imageSize.height * wRatio)\n  };\n  await doc.addImage(pdfData, 'JPEG', 0, 0, newImgSize.w, newImgSize.h);\n  const font = 'helvetica';\n  const fontStyle = 'bold';\n  const fontSize = 20;\n  const textColor = 'black';\n  doc.setFont(font, fontStyle);\n  doc.setFontSize(fontSize);\n  doc.setTextColor(textColor);\n  const orderProductsName = tbl_orderProducts.tableData.map((p, index) => {\n    return {\n      data: p.Name,\n      x: 20,\n      y: 130 + index * 10,\n      fontSize: 14,\n      fontStyle: 'normal',\n      font: 'helvetica'\n    };\n  });\n  const orderProductsQty = tbl_orderProducts.tableData.map((p, index) => {\n    return {\n      data: p.Quantity,\n      x: 110,\n      y: 130 + index * 10,\n      fontSize: 14,\n      fontStyle: 'normal',\n      font: 'helvetica'\n    };\n  });\n  const orderProductsCost = tbl_orderProducts.tableData.map((p, index) => {\n    return {\n      data: p.Subtotal.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      x: 175,\n      y: 130 + index * 10,\n      fontSize: 14,\n      fontStyle: 'normal',\n      font: 'helvetica'\n    };\n  });\n  const labelData = [...orderProductsName, ...orderProductsQty, ...orderProductsCost, {\n    data: tbl_orderProducts.tableData.reduce((a, b) => a + b.Subtotal, 0).toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    x: 170,\n    y: 205,\n    fontSize: 18,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: 'Order ID #' + appsmith.store.order.ID,\n    x: 130,\n    y: 25,\n    fontSize: 18,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_shipFrom.text || `1234 Industrial Blvd\nUnit 5678\nCityville, State 98765\n\n\n\nPhone: 988-989-9877`,\n    x: 150,\n    y: 60,\n    fontSize: 14,\n    fontStyle: 'normal',\n    font: 'helvetica'\n  }, {\n    data: appsmith.store.order.ShippingAddress,\n    x: 10,\n    y: 60,\n    fontSize: 14,\n    fontStyle: 'normal',\n    font: 'helvetica'\n  }, {\n    data: new Date(appsmith.store.order.Order_date).toDateString(),\n    x: 10,\n    y: 80,\n    fontSize: 14,\n    fontStyle: 'normal',\n    font: 'helvetica'\n  }];\n  labelData.forEach(field => {\n    let fieldValue = field.data;\n    fieldValue = typeof fieldValue == 'number' ? JSON.stringify(fieldValue) : fieldValue;\n    doc.setFont(field.font, field.fontStyle);\n    doc.setFontSize(field.fontSize);\n    doc.text(fieldValue, field.x, field.y);\n  });\n  doc.save('mydocument.pdf');\n  const outputPDF = doc.output('dataurlstring');\n  storeValue('labelPDF', outputPDF);\n  return outputPDF;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Orders_utils.generateInvoice",
  "deleted": false,
  "gitSyncId": "64f58f816fbfd93d5cd5b5cf_2023-09-04T08:05:27.998150Z"
}