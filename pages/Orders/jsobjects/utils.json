{
  "unpublishedCollection": {
    "name": "utils",
    "pageId": "Orders",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tinit: async () => {\n\t\tconst shippingDate = dat_shippingDate.formattedDate || new Date().toISOString();\n\t\tstoreValue('defaultTab', 'Sales Order');\n\t\tstoreValue('carrier', \t{\n\t\t\tid: 1,\n\t\t\tname: 'FedEX',\n\t\t\tshippingRate: 2.5,\n\t\t\tshippingDate: shippingDate,\n\t\t\tEta: new Date(new Date(shippingDate).getTime() + (4 * 24 * 60 * 60 * 1000)).toDateString(),\n\t\t})\n\t},\n\n\tidConverter: (prefix, num) => {\n\t\tlet str = num.toString();\n\t\tlet leadingZeros = \"00000\".substring(0, 5 - str.length);\n\t\treturn prefix + leadingZeros + str;\n\t},\n\n\tresetFilters: async () => {\n\t\tresetWidget('sel_status');\n\t\tresetWidget('dat_from');\n\t\tresetWidget('dat_to');\n\n\t\tawait this.getOrders();\n\t},\n\n\tgetOrders: async () => {\n\t\tconst orders = await getOrders.run();\n\t\tconst fromDate = dat_from.formattedDate || null;\n\t\tconst toDate = dat_to.formattedDate || null;\n\n\t\tlet filteredOrders = orders;\n\n\t\t// Filter based on date range if fromDate and toDate are provided\n\t\tif (fromDate && toDate) {\n\t\t\tfilteredOrders = filteredOrders.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n\t\t}\n\n\t\t// Filter based on status if sel_status is provided\n\t\tif (sel_status.selectedOptionValue) {\n\t\t\tfilteredOrders = filteredOrders.filter(k => k.status === sel_status.selectedOptionValue);\n\t\t}\n\n\t\treturn filteredOrders.map(o => {\n\t\t\treturn {\n\t\t\t\tID: this.idConverter('OR', o.id),\n\t\t\t\tOrder_id: o.id,\n\t\t\t\tOrder_date: o.created,\n\t\t\t\tCustomer: o.first_name + ' ' + o.last_name,\n\t\t\t\tTotal: o.total.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tDeliveryFee: o.shipping.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tShippingAddress: o.address1,\n\t\t\t\tStatus: o.status,\n\t\t\t\tPhone: o.phone,\n\t\t\t\tEmail: o.email,\n\t\t\t\tCarrier: o.carrier,\n\t\t\t\tShippingDate: o.shipping_date,\n\t\t\t\tEta: o.eta,\n\t\t\t\tWeightKg: o.weight_kg ? o.weight_kg.toString() : '',\n\t\t\t\tWeightLbs: o.weight_lbs ? o.weight_lbs.toString() : '',\n\t\t\t\tWidth: o.width ? o.width.toString() : '',\n\t\t\t\tLength: o.length ? o.length.toString() : '',\n\t\t\t\theight: o.height ? o.length.toString() : '',\n\t\t\t\tTracking: o.tracking_no\n\t\t\t}\n\t\t}).sort((a, b) => a.id - b.id)\n\t},\n\n\tgetOrderProducts: async () => {\n\t\tconst orderProducts = await getOrderProducts.run();\n\n\t\treturn orderProducts.map(p => {\n\t\t\treturn {\n\t\t\t\tId: p.id,\n\t\t\t\tName: p.name,\n\t\t\t\tSKU: p.sku,\n\t\t\t\tPrice: p.price,\n\t\t\t\tQuantity: p.quantity,\n\t\t\t\tTax: p.taxes,\n\t\t\t\tSubtotal: parseInt(p.price) * parseInt(p.quantity),\n\t\t\t\tImage: p.image,\n\t\t\t}\n\t\t})\n\t},\n\n\thandleBarCode: async () => {\n\t\tconst code = scn_productScanner.value;\n\n\t\tconst orderProducts = await this.getOrderProducts();\n\n\t\tconst foundProduct = orderProducts.filter(p => p.SKU === code);\n\n\t\tawait this.selectOrderProduct(foundProduct[0]);\n\t},\n\n\thandleCheckProduct: async (currentItem) => {\n\t\tconst orderProducts = appsmith.store.orderProducts || [];\n\t\tconst itemExistsInOrderProduct = orderProducts.filter(p => p.product.Id === currentItem.Id);\n\n\t\tif (itemExistsInOrderProduct && itemExistsInOrderProduct.length > 0) {\n\t\t\t// remove item\n\t\t\tconst removeOldProduct = orderProducts.filter(p => p.product.Id !== currentItem.Id);\n\t\t\tstoreValue('orderProducts', [...removeOldProduct])\n\t\t\treturn;\n\t\t} else {\n\t\t\t// Add all items\n\t\t\tstoreValue('orderProducts', [...orderProducts, {\n\t\t\t\tproduct: currentItem,\n\t\t\t\tcount: parseInt(currentItem.Quantity),\n\t\t\t}]);\n\t\t\treturn;\n\t\t}\n\t},\n\n\tisChecked: (currentItem) => {\n\t\tconst orderProducts = appsmith.store.orderProducts || [];\n\t\tconst itemExistsInOrderProduct = orderProducts.filter(p => p.product.Id === currentItem.Id);\n\n\t\tif (itemExistsInOrderProduct && itemExistsInOrderProduct.length > 0) {\n\t\t\t// check that all items are in orderProducts\n\t\t\tif (itemExistsInOrderProduct[0].count === parseInt(currentItem.Quantity)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\n\tselectOrderProduct: async (product) => {\n\t\tif (product) {\n\t\t\tconst orderProducts = appsmith.store.orderProducts || [];\n\n\t\t\tif (orderProducts.length === 0) {\n\t\t\t\tstoreValue('orderProducts', [{\n\t\t\t\t\tproduct,\n\t\t\t\t\tcount: 1,\n\t\t\t\t}])\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst productInOrderProduct = orderProducts.filter(p => p.product.Id === product.Id);\n\t\t\tif (productInOrderProduct && productInOrderProduct.length > 0) {\n\n\t\t\t\tif (productInOrderProduct[0].count < product.Quantity) {\n\t\t\t\t\tconst removeOldProduct = orderProducts.filter(p => p.product.Id !== product.Id);\n\t\t\t\t\tstoreValue('orderProducts', [...removeOldProduct, {\n\t\t\t\t\t\tproduct,\n\t\t\t\t\t\tcount: productInOrderProduct[0].count + 1,\n\t\t\t\t\t}])\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\treturn showAlert('All products added!', 'info');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstoreValue('orderProducts', [...orderProducts, {\n\t\t\t\t\tproduct,\n\t\t\t\t\tcount: 1,\n\t\t\t\t}]);\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t},\n\n\torderProductCount: () => {\n\t\tconst storeProducts = appsmith.store.orderProducts ? appsmith.store.orderProducts.reduce((a, b) => a + b.count, 0) : 0;\n\t\tconst allItems = lst_orderProducts.listData.reduce((a, b) => a + b.Quantity, 0);\n\n\t\treturn `${storeProducts}/${allItems} items picked`;\n\t},\n\n\tsingleOrderProductCount: (currentItem) => {\n\t\tlet storedCount = 0;\n\t\tif (appsmith.store.orderProducts) {\n\t\t\tconst product = appsmith.store.orderProducts.filter(p => p.product.Id === currentItem.Id);\n\t\t\tif (product.length > 0) {\n\t\t\t\tstoredCount = product[0].count;\n\t\t\t}\n\t\t}\n\n\t\treturn `${storedCount}/${currentItem.Quantity} Items`;\n\t},\n\n\tremoveSingleOrderProduct: (currentItem) => {\n\t\tconst orderProducts = appsmith.store.orderProducts || [];\n\n\t\tconst orderProduct = orderProducts.filter(p => p.product.Id === currentItem.Id);\n\n\t\tif (orderProduct && orderProduct.length > 0) {\n\t\t\tif (orderProduct[0].count === 1) {\n\t\t\t\tconst removeSingleProduct = orderProducts.filter(p => p.product.Id !== currentItem.Id);\n\n\t\t\t\treturn storeValue('orderProducts', removeSingleProduct)\n\t\t\t} else {\n\t\t\t\tconst removeSingleProduct = orderProducts.filter(p => p.product.Id !== currentItem.Id);\n\n\t\t\t\treturn storeValue('orderProducts', [...removeSingleProduct, {\n\t\t\t\t\tproduct: currentItem,\n\t\t\t\t\tcount: orderProduct[0].count - 1\n\t\t\t\t}])\n\t\t\t}\n\t\t}\n\t},\n\n\tupdateStatus: async (statusId) => {\n\n\t\tif (!appsmith.store.orderProducts || appsmith.store.orderProducts.length < 1) {\n\t\t\treturn showAlert('Pick products to continue', 'warning');\n\t\t}\n\n\t\tawait updateOrderStatus.run({\n\t\t\tstatusId,\n\t\t});\n\n\t\tawait recordOrderTrack.run({\n\t\t\torderStatusId: statusId\n\t\t});\n\n\n\t\tconst orders = await this.getOrders();\n\n\t\tconst order = orders.filter(o => o.Order_id === appsmith.store.order.Order_id);\n\n\t\tstoreValue('order', order[0]);\n\n\t\tshowAlert('Order Updated!', 'success');\n\t},\n\n\tupdateOrderShipping: async () => {\n\n\t\tif (!sel_carrier.selectedOptionValue) {\n\t\t\treturn showAlert('Add carrier to continue!', 'warning')\n\t\t}\n\n\t\tawait updateOrderShipping.run();\n\n\t\tawait recordOrderTrack.run({\n\t\t\torderStatusId: 3\n\t\t})\n\t\tawait this.getOrders();\n\n\t\tconst orders = await this.getOrders();\n\n\t\tconst order = orders.filter(o => o.Order_id === appsmith.store.order.Order_id);\n\n\t\tstoreValue('order', order[0]);\n\n\t\tresetWidget('tbl_orders');\n\n\t\tshowAlert('Order Updated!', 'success');\n\t},\n\n\tonOrderSelected: async () => {\n\t\tstoreValue('order', tbl_orders.selectedRow);\n\t\tshowModal('mdl_orderDetails')\n\t\tawait this.getOrderProducts();\n\t\tawait this.getOrderTrack()\n\t\tstoreValue('orderProducts', null);\n\t\tresetWidget('lst_orderProducts');\n\t},\n\n\tgetCarrierData: async () => {\n\n\t\tconst shippingDate = dat_shippingDate.formattedDate || new Date().toISOString();\n\n\t\tconst carriers = [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'FedEX',\n\t\t\t\tshippingRate: 2.5,\n\t\t\t\tshippingDate: shippingDate,\n\t\t\t\tEta: new Date(new Date(shippingDate).getTime() + (4 * 24 * 60 * 60 * 1000)).toDateString(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'DHL',\n\t\t\t\tshippingRate: 3,\n\t\t\t\tshippingDate: dat_shippingDate.formattedDate,\n\t\t\t\tEta: new Date(new Date(shippingDate).getTime() + (5* 24 * 60 * 60 * 1000)).toDateString(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'USPS',\n\t\t\t\tshippingRate: 2,\n\t\t\t\tshippingDate: dat_shippingDate.formattedDate,\n\t\t\t\tEta: new Date(new Date(shippingDate).getTime() + (6 * 24 * 60 * 60 * 1000)).toDateString(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 4,\n\t\t\t\tname: 'Blue Dart',\n\t\t\t\tshippingRate: 3,\n\t\t\t\tshippingDate: dat_shippingDate.formattedDate,\n\t\t\t\tEta: new Date(new Date(shippingDate).getTime() + (2 * 24 * 60 * 60 * 1000)).toDateString(),\n\t\t\t}\n\t\t]\n\n\t\tconst carrierName = sel_carrier.selectedOptionValue;\n\n\t\tconst carrier = carriers.filter(c => c.name === carrierName)[0];\n\n\t\tstoreValue('carrier', carrier);\n\n\t\treturn carrier;\n\n\t},\n\n\tgetOrderTrack: async () => {\n\t\tconst orderTrack = await getOrderTrack.run();\n\n\t\treturn orderTrack.map((o, index) => {\n\t\t\treturn {\n\t\t\t\tid: index,\n\t\t\t\tStatus: o.label,\n\t\t\t\tDate: new Date(o.created).toDateString(),\n\t\t\t\tTime: new Date(o.created).toLocaleTimeString().slice(0, 5),\n\t\t\t}\n\t\t})\n\t},\n\n\tstatusColor: (status) => {\n\t\tif (status === 'CANCELLED') {\n\t\t\treturn 'RGB(255, 0, 0)'\n\t\t};\n\t\tif (status === 'UNFULFILLED' || status === 'PACKED') {\n\t\t\treturn 'RGB(255, 165, 0)';\n\t\t};\n\t\tif (status === 'SHIPPED' || status === 'DELIVERED') {\n\t\t\treturn 'RGB(0, 128, 0)'\n\t\t}\n\t\treturn 'RGB(255, 165, 0)'\n\t},\n\n\tgenerateRandomLabelCode: () => {\n\t\tlet code = '';\n\t\tconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tcode += characters.charAt(Math.floor(Math.random() * characters.length));\n\t\t}\n\n\t\tcode += ' ';\n\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tcode += characters.charAt(Math.floor(Math.random() * characters.length));\n\t\t}\n\n\t\treturn code;\n\t},\n\n\tgenerateLabel: async () => {\n\t\tconst imgUrl = 'https://s3.us-east-2.amazonaws.com/template.appsmith.com/order-fulfillment-tracker-demo-label.jpg';\n\t\tlet doc = new jspdf.jsPDF();\n\n\t\tlet pdfData = await getPdfImage.run({url: imgUrl});\n\n\t\t//add image, scaled to fit 100% of doc width\n\t\tconst docSize = _.pick(doc.internal.pageSize, ['width','height']);\n\t\tconst imageSize = _.pick(doc.getImageProperties(pdfData), ['width','height'])\n\t\tconst wRatio = docSize.width/imageSize.width;\n\t\tconst newImgSize = {w:parseInt(imageSize.width*wRatio),h:parseInt(imageSize.height*wRatio)};\n\t\tawait doc.addImage(pdfData, 'JPEG', 0, 0, newImgSize.w, newImgSize.h);\n\n\t\t//Set fonts and style\n\t\tconst font = 'helvetica';\n\t\tconst fontStyle = 'bold';\n\t\tconst fontSize = 20;\n\t\tconst textColor ='black';\n\t\tdoc.setFont(font, fontStyle);\n\t\tdoc.setFontSize(fontSize);\n\t\tdoc.setTextColor(textColor);\n\n\t\tconst inputLength = inp_length.text || '';\n\t\tconst inputWidth = inp_width.text || '';\n\t\tconst inputHeight = inp_height.text || '';\n\t\tconst code = this.generateRandomLabelCode();\n\n\t\tconst labelData = [\n\t\t\t{\n\t\t\t\tdata: 'Order ID #' + appsmith.store.order.ID,\n\t\t\t\tx: 130,\n\t\t\t\ty: 10,\n\t\t\t\tfontSize: 20,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: inp_shipFrom.text,\n\t\t\t\tx: 5,\n\t\t\t\ty: 90,\n\t\t\t\tfontSize: 20,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: code,\n\t\t\t\tx: 5,\n\t\t\t\ty: 140,\n\t\t\t\tfontSize: 24,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: appsmith.store.order.ShippingAddress,\n\t\t\t\tx: 5,\n\t\t\t\ty: 260,\n\t\t\t\tfontSize: 20,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: 'CARRIER: ' + 'UPS',\n\t\t\t\tx: 5,\n\t\t\t\ty: 45,\n\t\t\t\tfontSize: 22,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: dat_shippingDate.formattedDate,\n\t\t\t\tx: 5,\n\t\t\t\ty: 10,\n\t\t\t\tfontSize: 20,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: inp_kg.text.length > 0 ? `Weight: ${inp_kg.text}kg` : '',\n\t\t\t\tx: 80,\n\t\t\t\ty: 140,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: inp_lbs.text.length > 0 ? `${inp_lbs.text}lbs` : '',\n\t\t\t\tx: 120,\n\t\t\t\ty: 140,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: `DIMENSIONS: ${inputLength} x ${inputWidth} x ${inputHeight}`,\n\t\t\t\tx: 80,\n\t\t\t\ty: 125,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: inp_trackingId.text.length > 0 ? inp_trackingId.text : '',\n\t\t\t\tx: 70,\n\t\t\t\ty: 212,\n\t\t\t\tfontSize: 16,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\n\t\t];\n\n\n\t\t// Loop through the template data and add the text to the PDF\n\t\tlabelData.forEach((field) => {\n\t\t\tlet fieldValue = field.data;\n\t\t\tfieldValue = typeof fieldValue == 'number' ? JSON.stringify(fieldValue) : fieldValue;\n\t\t\tdoc.setFont(field.font, field.fontStyle);\n\t\t\tdoc.setFontSize(field.fontSize);\n\t\t\tdoc.text(fieldValue, field.x, field.y);\n\t\t});\n\n\t\tdoc.save('mydocument.pdf');\n\n\t\t// Output to the browser\n\t\tconst outputPDF = doc.output('dataurlstring');\n\t\tstoreValue('labelPDF', outputPDF);\n\t\treturn outputPDF;\n\t},\n\n\tgenerateInvoice: async () => {\n\t\tconst imgUrl = 'https://s3.us-east-2.amazonaws.com/template.appsmith.com/order-fulfillment-tracker-demo-invoice.jpg';\n\t\tlet doc = new jspdf.jsPDF();\n\n\t\tlet pdfData = await getPdfImage.run({url: imgUrl});\n\n\t\t//add image, scaled to fit 100% of doc width\n\t\tconst docSize = _.pick(doc.internal.pageSize, ['width','height']);\n\t\tconst imageSize = _.pick(doc.getImageProperties(pdfData), ['width','height'])\n\t\tconst wRatio = docSize.width/imageSize.width;\n\t\tconst newImgSize = {w:parseInt(imageSize.width*wRatio),h:parseInt(imageSize.height*wRatio)};\n\t\tawait doc.addImage(pdfData, 'JPEG', 0, 0, newImgSize.w, newImgSize.h);\n\n\t\t//Set fonts and style\n\t\tconst font = 'helvetica';\n\t\tconst fontStyle = 'bold';\n\t\tconst fontSize = 20;\n\t\tconst textColor ='black';\n\t\tdoc.setFont(font, fontStyle);\n\t\tdoc.setFontSize(fontSize);\n\t\tdoc.setTextColor(textColor);\n\n\t\tconst orderProductsName = tbl_orderProducts.tableData.map((p, index) => {\n\t\t\treturn {\n\t\t\t\tdata: p.Name,\n\t\t\t\tx: 20,\n\t\t\t\ty: 130 + index * 10,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'normal',\n\t\t\t\tfont: 'helvetica',\n\t\t\t}\n\t\t});\n\n\t\tconst orderProductsQty = tbl_orderProducts.tableData.map((p, index) => {\n\t\t\treturn {\n\t\t\t\tdata: p.Quantity,\n\t\t\t\tx: 110,\n\t\t\t\ty: 130 + index * 10,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'normal',\n\t\t\t\tfont: 'helvetica',\n\t\t\t}\n\t\t});\n\n\t\tconst orderProductsCost = tbl_orderProducts.tableData.map((p, index) => {\n\t\t\treturn {\n\t\t\t\tdata: p.Subtotal.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tx: 175,\n\t\t\t\ty: 130 + index * 10,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'normal',\n\t\t\t\tfont: 'helvetica',\n\t\t\t}\n\t\t})\n\n\t\tconst labelData = [\n\t\t\t...orderProductsName,\n\t\t\t...orderProductsQty,\n\t\t\t...orderProductsCost,\n\t\t\t{\n\t\t\t\tdata: tbl_orderProducts.tableData.reduce((a, b) => a + b.Subtotal, 0).toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tx: 170,\n\t\t\t\ty: 205,\n\t\t\t\tfontSize: 18,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: 'Order ID #' + appsmith.store.order.ID,\n\t\t\t\tx: 130,\n\t\t\t\ty: 25,\n\t\t\t\tfontSize: 18,\n\t\t\t\tfontStyle: 'bold',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: inp_shipFrom.text || `1234 Industrial Blvd\nUnit 5678\nCityville, State 98765\n\n\n\nPhone: 988-989-9877`,\n\t\t\t\tx: 150,\n\t\t\t\ty: 60,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'normal',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: appsmith.store.order.ShippingAddress,\n\t\t\t\tx: 10,\n\t\t\t\ty: 60,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'normal',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdata: new Date(appsmith.store.order.Order_date).toDateString(),\n\t\t\t\tx: 10,\n\t\t\t\ty: 80,\n\t\t\t\tfontSize: 14,\n\t\t\t\tfontStyle: 'normal',\n\t\t\t\tfont: 'helvetica',\n\t\t\t},\n\t\t];\n\n\n\t\t// Loop through the template data and add the text to the PDF\n\t\tlabelData.forEach((field) => {\n\t\t\tlet fieldValue = field.data;\n\t\t\tfieldValue = typeof fieldValue == 'number' ? JSON.stringify(fieldValue) : fieldValue;\n\t\t\tdoc.setFont(field.font, field.fontStyle);\n\t\t\tdoc.setFontSize(field.fontSize);\n\t\t\tdoc.text(fieldValue, field.x, field.y);\n\t\t});\n\n\t\tdoc.save('mydocument.pdf');\n\n\t\t// Output to the browser\n\t\tconst outputPDF = doc.output('dataurlstring');\n\t\tstoreValue('labelPDF', outputPDF);\n\t\treturn outputPDF;\n\t},\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "Orders_utils",
  "deleted": false,
  "gitSyncId": "64f58f816fbfd93d5cd5b5cf_64f58fc86fbfd93d5cd5b625"
}