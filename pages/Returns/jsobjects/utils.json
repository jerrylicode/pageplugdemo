{
  "unpublishedCollection": {
    "name": "utils",
    "pageId": "Returns",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\t\n\t\tidConverter: (num) => {\n\t\tlet str = num.toString();\n\t\tlet leadingZeros = \"00000\".substring(0, 5 - str.length);\n\t\treturn 'R' + leadingZeros + str;\n\t},\n\t\n\tgetReturns: async () => {\n\t\tconst returns = await getReturns.run();\n\n\t\tconst fromDate = dat_from.formattedDate || null;\n\t\tconst toDate = dat_to.formattedDate || null;\n\n\t\tlet filteredReturns = returns;\n\n\t\t// Filter based on date range if fromDate and toDate are provided\n\t\tif (fromDate && toDate) {\n\t\t\tfilteredReturns = returns.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n\t\t}\n\n\t\t// Filter based on status if sel_status is provided\n\t\tif (sel_status.selectedOptionValue) {\n\t\t\tfilteredReturns = returns.filter(k => k.status === sel_status.selectedOptionValue);\n\t\t}\n\n\t\treturn filteredReturns.map(r => {\n\t\t\treturn {\n\t\t\t\tId: r.id,\n\t\t\t\tID: this.idConverter(r.id),\n\t\t\t\tOrderID: r.order_id,\n\t\t\t\tProduct: r.name,\n\t\t\t\tDescription: r.category,\n\t\t\t\tShippedQty: r.quantity,\n\t\t\t\tQuantity: r.returned_quantity,\n\t\t\t\tAmount: r.price.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tReturnOrderID: 1,\n\t\t\t\tWarehouseName: r.label,\n\t\t\t\tReturnedDate: new Date(r.returned_date).toDateString(),\n\t\t\t\tReason: r.reason,\n\t\t\t\tStatus: r.status,\n\t\t\t\tWarehouse: r.warehouse,\n\t\t\t\tWarehouseId: r.warehouse_id\n\t\t\t}\n\t\t}).sort((a, b) => a.id - b.id)\n\t},\n\n\n\tgetWarehouses: async () => {\n\t\tconst returns = await getReturns.run();\n\t\tconst warehouses = returns.map(p => {\n\t\t\treturn {\n\t\t\t\tid: p.warehouse_id,\n\t\t\t\tname: p.warehouse\n\t\t\t}\n\t\t});\n\t\tconst sanitisedWarehouses = warehouses.filter(warehouse => warehouse.name !== null && warehouse.name.trim() !== \"\");\n\n\t\tif (!returns || returns.length < 1) {\n\t\t\treturn [{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'Jamison Yard',\n\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\tname: 'Brit Avenue',\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t ]\n\t\t}\n\n\t\tconst uniqueWarehousesRaw = {}\n\n\t\tfor (let i = 0; i < sanitisedWarehouses.length; i++) {\n\t\t\t// Add each string to the object as a key with a value of true\n\t\t\tuniqueWarehousesRaw[sanitisedWarehouses[i].name] = {\n\t\t\t\tid: sanitisedWarehouses[i].id\n\t\t\t};\n\t\t}\n\n\n\t\t// Get an array of unique strings from the object keys\n\t\tconst uniqueWarehouses = Object.keys(uniqueWarehousesRaw);\n\n\t\treturn uniqueWarehouses.map((category) => {\n\t\t\treturn {\n\t\t\t\tid: uniqueWarehousesRaw[category].id,\n\t\t\t\tname: category,\n\t\t\t}\n\t\t})\n\t},\n\n\tmarkReceived: async () => {\n\t\tawait markReceived.run();\n\n\t\tawait this.getReturns();\n\n\t\tcloseModal('mdl_returnsDetail');\n\n\t\tshowAlert('Return Order Maked as Received!', 'success');\n\t},\n\n\thandleRefund: async () => {\n\n\t\tif (!sel_warehouse.selectedOptionValue || !sel_payment.selectedOptionValue) {\n\t\t\treturn showAlert('Select warehouse and payment to continue', 'warning');\n\t\t}\n\n\t\tawait handleRefund.run();\n\n\t\tawait this.getReturns();\n\n\t\tcloseModal('mdl_returnsDetail');\n\n\t\tshowAlert('Refund Initiated!', 'success');\n\t},\n\n\tstatusColor: (status) => {\n\t\tif (status === 'Return Initiated' || status === 'Reveived') {\n\t\t\treturn 'RGB(255, 165, 0)';\n\t\t};\n\t\tif (status === 'Return Processed') {\n\t\t\treturn 'RGB(0, 128, 0)'\n\t\t}\n\t\treturn 'RGB(255, 165, 0)'\n\t},\n\n\thandleResetFilter: async () => {\n\t\tresetWidget('sel_status');\n\t\tresetWidget('dat_to');\n\t\tresetWidget('dat_from');\n\n\t\tawait this.getReturns();\n\t},\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "Returns_utils",
  "deleted": false,
  "gitSyncId": "64f58f816fbfd93d5cd5b5cf_64f58fc86fbfd93d5cd5b62b"
}