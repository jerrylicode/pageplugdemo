{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "generateLabel",
    "fullyQualifiedName": "utils.generateLabel",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Orders",
    "collectionId": "Orders_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const imgUrl = 'https://s3.us-east-2.amazonaws.com/template.appsmith.com/order-fulfillment-tracker-demo-label.jpg';\n  let doc = new jspdf.jsPDF();\n  let pdfData = await getPdfImage.run({\n    url: imgUrl\n  });\n  const docSize = _.pick(doc.internal.pageSize, ['width', 'height']);\n  const imageSize = _.pick(doc.getImageProperties(pdfData), ['width', 'height']);\n  const wRatio = docSize.width / imageSize.width;\n  const newImgSize = {\n    w: parseInt(imageSize.width * wRatio),\n    h: parseInt(imageSize.height * wRatio)\n  };\n  await doc.addImage(pdfData, 'JPEG', 0, 0, newImgSize.w, newImgSize.h);\n  const font = 'helvetica';\n  const fontStyle = 'bold';\n  const fontSize = 20;\n  const textColor = 'black';\n  doc.setFont(font, fontStyle);\n  doc.setFontSize(fontSize);\n  doc.setTextColor(textColor);\n  const inputLength = inp_length.text || '';\n  const inputWidth = inp_width.text || '';\n  const inputHeight = inp_height.text || '';\n  const code = utils.generateRandomLabelCode();\n  const labelData = [{\n    data: 'Order ID #' + appsmith.store.order.ID,\n    x: 130,\n    y: 10,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_shipFrom.text,\n    x: 5,\n    y: 90,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: code,\n    x: 5,\n    y: 140,\n    fontSize: 24,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: appsmith.store.order.ShippingAddress,\n    x: 5,\n    y: 260,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: 'CARRIER: ' + 'UPS',\n    x: 5,\n    y: 45,\n    fontSize: 22,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: dat_shippingDate.formattedDate,\n    x: 5,\n    y: 10,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_kg.text.length > 0 ? `Weight: ${inp_kg.text}kg` : '',\n    x: 80,\n    y: 140,\n    fontSize: 14,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_lbs.text.length > 0 ? `${inp_lbs.text}lbs` : '',\n    x: 120,\n    y: 140,\n    fontSize: 14,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: `DIMENSIONS: ${inputLength} x ${inputWidth} x ${inputHeight}`,\n    x: 80,\n    y: 125,\n    fontSize: 14,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_trackingId.text.length > 0 ? inp_trackingId.text : '',\n    x: 70,\n    y: 212,\n    fontSize: 16,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }];\n  labelData.forEach(field => {\n    let fieldValue = field.data;\n    fieldValue = typeof fieldValue == 'number' ? JSON.stringify(fieldValue) : fieldValue;\n    doc.setFont(field.font, field.fontStyle);\n    doc.setFontSize(field.fontSize);\n    doc.text(fieldValue, field.x, field.y);\n  });\n  doc.save('mydocument.pdf');\n  const outputPDF = doc.output('dataurlstring');\n  storeValue('labelPDF', outputPDF);\n  return outputPDF;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const imgUrl = 'https://s3.us-east-2.amazonaws.com/template.appsmith.com/order-fulfillment-tracker-demo-label.jpg';\n  let doc = new jspdf.jsPDF();\n  let pdfData = await getPdfImage.run({\n    url: imgUrl\n  });\n  const docSize = _.pick(doc.internal.pageSize, ['width', 'height']);\n  const imageSize = _.pick(doc.getImageProperties(pdfData), ['width', 'height']);\n  const wRatio = docSize.width / imageSize.width;\n  const newImgSize = {\n    w: parseInt(imageSize.width * wRatio),\n    h: parseInt(imageSize.height * wRatio)\n  };\n  await doc.addImage(pdfData, 'JPEG', 0, 0, newImgSize.w, newImgSize.h);\n  const font = 'helvetica';\n  const fontStyle = 'bold';\n  const fontSize = 20;\n  const textColor = 'black';\n  doc.setFont(font, fontStyle);\n  doc.setFontSize(fontSize);\n  doc.setTextColor(textColor);\n  const inputLength = inp_length.text || '';\n  const inputWidth = inp_width.text || '';\n  const inputHeight = inp_height.text || '';\n  const code = utils.generateRandomLabelCode();\n  const labelData = [{\n    data: 'Order ID #' + appsmith.store.order.ID,\n    x: 130,\n    y: 10,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_shipFrom.text,\n    x: 5,\n    y: 90,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: code,\n    x: 5,\n    y: 140,\n    fontSize: 24,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: appsmith.store.order.ShippingAddress,\n    x: 5,\n    y: 260,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: 'CARRIER: ' + 'UPS',\n    x: 5,\n    y: 45,\n    fontSize: 22,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: dat_shippingDate.formattedDate,\n    x: 5,\n    y: 10,\n    fontSize: 20,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_kg.text.length > 0 ? `Weight: ${inp_kg.text}kg` : '',\n    x: 80,\n    y: 140,\n    fontSize: 14,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_lbs.text.length > 0 ? `${inp_lbs.text}lbs` : '',\n    x: 120,\n    y: 140,\n    fontSize: 14,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: `DIMENSIONS: ${inputLength} x ${inputWidth} x ${inputHeight}`,\n    x: 80,\n    y: 125,\n    fontSize: 14,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }, {\n    data: inp_trackingId.text.length > 0 ? inp_trackingId.text : '',\n    x: 70,\n    y: 212,\n    fontSize: 16,\n    fontStyle: 'bold',\n    font: 'helvetica'\n  }];\n  labelData.forEach(field => {\n    let fieldValue = field.data;\n    fieldValue = typeof fieldValue == 'number' ? JSON.stringify(fieldValue) : fieldValue;\n    doc.setFont(field.font, field.fontStyle);\n    doc.setFontSize(field.fontSize);\n    doc.text(fieldValue, field.x, field.y);\n  });\n  doc.save('mydocument.pdf');\n  const outputPDF = doc.output('dataurlstring');\n  storeValue('labelPDF', outputPDF);\n  return outputPDF;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Orders_utils.generateLabel",
  "deleted": false,
  "gitSyncId": "64f58f816fbfd93d5cd5b5cf_2023-09-04T08:05:27.994426Z"
}