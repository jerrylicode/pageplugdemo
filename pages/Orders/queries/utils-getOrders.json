{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getOrders",
    "fullyQualifiedName": "utils.getOrders",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Orders",
    "collectionId": "Orders_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const orders = await getOrders.run();\n  const fromDate = dat_from.formattedDate || null;\n  const toDate = dat_to.formattedDate || null;\n  let filteredOrders = orders;\n  if (fromDate && toDate) {\n    filteredOrders = filteredOrders.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n  }\n  if (sel_status.selectedOptionValue) {\n    filteredOrders = filteredOrders.filter(k => k.status === sel_status.selectedOptionValue);\n  }\n  return filteredOrders.map(o => {\n    return {\n      ID: utils.idConverter('OR', o.id),\n      Order_id: o.id,\n      Order_date: o.created,\n      Customer: o.first_name + ' ' + o.last_name,\n      Total: o.total.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      DeliveryFee: o.shipping.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      ShippingAddress: o.address1,\n      Status: o.status,\n      Phone: o.phone,\n      Email: o.email,\n      Carrier: o.carrier,\n      ShippingDate: o.shipping_date,\n      Eta: o.eta,\n      WeightKg: o.weight_kg ? o.weight_kg.toString() : '',\n      WeightLbs: o.weight_lbs ? o.weight_lbs.toString() : '',\n      Width: o.width ? o.width.toString() : '',\n      Length: o.length ? o.length.toString() : '',\n      height: o.height ? o.length.toString() : '',\n      Tracking: o.tracking_no\n    };\n  }).sort((a, b) => a.id - b.id);\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const orders = await getOrders.run();\n  const fromDate = dat_from.formattedDate || null;\n  const toDate = dat_to.formattedDate || null;\n  let filteredOrders = orders;\n  if (fromDate && toDate) {\n    filteredOrders = filteredOrders.filter(k => new Date(k.created) >= new Date(fromDate) && new Date(k.created) <= new Date(toDate));\n  }\n  if (sel_status.selectedOptionValue) {\n    filteredOrders = filteredOrders.filter(k => k.status === sel_status.selectedOptionValue);\n  }\n  return filteredOrders.map(o => {\n    return {\n      ID: utils.idConverter('OR', o.id),\n      Order_id: o.id,\n      Order_date: o.created,\n      Customer: o.first_name + ' ' + o.last_name,\n      Total: o.total.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      DeliveryFee: o.shipping.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      ShippingAddress: o.address1,\n      Status: o.status,\n      Phone: o.phone,\n      Email: o.email,\n      Carrier: o.carrier,\n      ShippingDate: o.shipping_date,\n      Eta: o.eta,\n      WeightKg: o.weight_kg ? o.weight_kg.toString() : '',\n      WeightLbs: o.weight_lbs ? o.weight_lbs.toString() : '',\n      Width: o.width ? o.width.toString() : '',\n      Length: o.length ? o.length.toString() : '',\n      height: o.height ? o.length.toString() : '',\n      Tracking: o.tracking_no\n    };\n  }).sort((a, b) => a.id - b.id);\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Orders_utils.getOrders",
  "deleted": false,
  "gitSyncId": "64f58f816fbfd93d5cd5b5cf_2023-09-04T08:05:27.979902Z"
}